#!/usr/bin/env php
<?php

class Cli {
	
	/**
	 * Constructor our Configure Class
	 */
	public function __construct ( ) {
		# Install Default Files
		`cp -n config.default.php config.php`;
		`cp -n application/config/sample/* application/config`;
		`cp -n application/data/fixtures/data.default.yml application/data/fixtures/data.yml`;
		`cp -n application/data/schema/schema.default.yml application/data/schema/schema.yml`;
		
		# Prepare
		require(dirname(__FILE__).'/bootstrapr.php');
	}
	
	/**
	 * Run our Configuration
	 */
	public function run ( ) {
		# Say Hello
		$this->welcome();
		
		# Install Core Configuration
		$this->installCore();
		
		# Install Base Configuration
		$this->installBase();
		
		# Install Advanced Configuration
		$this->installAdvanced();
		
		# Say Bye
		$this->goodbye();
	}
	
	/**
	 * Display a nice Welcome Message
	 */
	public function welcome ( ) {
		# Hi
		echo "Welcome to the BalCMS Installer.\n\n";
	}
	
	/**
	 * Display a nice Goodbye Message
	 */
	public function goodbye ( ) {
		# Bye
		echo "Your BalCMS Installation is Now Configured.\n";
		// system("open ${root_url}${base_url}");
	}
	
	/**
	 * Perform the Core Installation
	 */
	public function installCore ( ) {
		# Prepare
		$Bootstrapr = Bootstrapr::getInstance();
		$Bootstrapr->bootstrap('environment');
		
		# --------------------------
		
		# Common Path
		if ( !defined('COMMON_PATH') ) {
			# Common Path
			echo "Error: You have not specified a common path... This should have been set already..."."\n";
			exit;
		}
		
		# Adjust Common Path
		if ( !is_dir(COMMON_PATH) && !mkdir(COMMON_PATH) ) {
			echo "Error: Could not read the common directory: [".COMMON_PATH."]";
			exit;
		}
		
		# ----------------
		
		# Install Submodules
		echo "Installing Submodules...\n";
		`git submodule init; git submodule update; git submodule foreach 'git submodule init; git submodule update;'`;
		
		# --------------------------
		
		# Define our Core Resources
		$resources = array(
			array(
				'title'			=> 'Symfony YAML Components',
				'source'		=> 'http://github.com/fabpot/yaml.git',
				'destination'	=> SFYAML_ROOT_PATH,
				'vcs'			=> 'git'
			)
		);
		
		# --------------------------
		
		# Install our Core Resources
		$this->installResources($resources, 'Installing Core Resources...');
		
		# --------------------------
		
		# Return true
		return true;
	}
	
	/**
	 * Perform the Base Installation
	 */
	public function installBase ( ) {
		# Prepare
		$Bootstrapr = Bootstrapr::getInstance();
		$Bootstrapr->bootstrap('configuration');
		
		# --------------------------
		
		# Adjust Library Path
		if ( !is_dir(LIBRARY_PATH) && !mkdir(LIBRARY_PATH) ) {
			echo "Error: Could not read the library directory: [".LIBRARY_PATH."]";
			exit;
		}
		
		# --------------------------
		
		# Define our Base Resources
		$resources = array(
			array(
				'title'			=> 'BalPHP',
				'source'		=> 'http://github.com/balupton/balphp.git',
				'destination'	=> BALPHP_ROOT_PATH,
				'vcs'			=> 'git',
				'branch'		=> 'v1.0',
				'symlinks'		=> array(
					array(
						'source'		=> BALPHP_PATH.'/Bal',
						'destination'	=> LIBRARY_PATH.'/Bal'
					)
				)
			),
			array(
				'title'			=> 'Doctrine Extension Taggable',
				'source'		=> 'http://github.com/balupton/Doctrine-Extension-Taggable.git',
				'destination'	=> DOCTRINE_EXTENSIONS_PATH.'/Taggable',
				'vcs'			=> 'git'
			),
			array(
				'title'			=> 'Doctrine ORM',
				'source'		=> 'http://github.com/balupton/doctrine1.git',
				'destination'	=> DOCTRINE_ROOT_PATH,
				'vcs'			=> 'git',
				'branch'		=> 'v1.2.1-bal',
				'symlinks'		=> array(
					array(
						'source'		=> DOCTRINE_PATH.'/Doctrine',
						'destination'	=> LIBRARY_PATH.'/Doctrine'
					),
					array(
						'source'		=> DOCTRINE_PATH.'/Doctrine.php',
						'destination'	=> LIBRARY_PATH.'/Doctrine.php'
					)
				)
			),
			array(
				'title'			=> 'HTML Purifier',
				'source'		=> 'http://github.com/balupton/HTMLPurifier.git',
				'destination'	=> HTMLPURIFIER_PATH,
				'vcs'			=> 'git',
				'branch'		=> 'v4.2.0'
			),
			array(
				'title'			=> 'Zend Framework',
				'source'		=> 'http://github.com/balupton/zend-framework-v1.git',
				'destination'	=> ZEND_PATH,
				'vcs'			=> 'git',
				'branch'		=> 'v1.10.8-bal',
				'symlinks'		=> array(
					array(
						'source'		=> ZEND_PATH.'/Zend',
						'destination'	=> LIBRARY_PATH.'/Zend'
					)
				)
			),
			array(
				'title'			=> 'Scaffold',
				'source'		=> 'http://github.com/balupton/Scaffold.git',
				'destination'	=> SCAFFOLD_PATH,
				'vcs'			=> 'git',
				'submodules'	=> true
			)
		);
		
		# Define our Base Symlinks
		$symlinks = array(
			array(
				'title'			=> 'BalPHP Models',
				'source'		=> BALPHP_PATH.'/models',
				'destination'	=> APPLICATION_ROOT_PATH.'/application/models/Bal'
			)
		);
		
		# --------------------------
		
		# Install our Base Resources
		$this->installResources($resources, 'Installing Base Resources...');
		
		# Install our Base Symlinks
		$this->installSymlinks($symlinks, 'Installing Base Symlinks...');
		
		# --------------------------
		
		# Return true
		return true;
	}
	
	/**
	 * Perform the Advanced Installation
	 */
	public function installAdvanced ( ) {
		# Prepare
		$APPLICATION_ROOT_PATH = APPLICATION_ROOT_PATH;
		
		# --------------------------
		
		# Define our Advanced Resources
		$resources = array(
			array(
				'title'			=> 'jQuery Ajaxy',
				'source'		=> 'http://github.com/balupton/jquery-ajaxy.git',
				'destination'	=> JQUERY_AJAXY_PATH,
				'branch'		=> 'v1.7',
				'vcs'			=> 'git'
			),
			array(
				'title'			=> 'jQuery Lightbox',
				'source'		=> 'http://github.com/balupton/jquery-lightbox.git',
				'destination'	=> JQUERY_LIGHTBOX_PATH,
				'vcs'			=> 'git'
			),
			array(
				'title'			=> 'jQuery Sparkle',
				'source'		=> 'http://github.com/balupton/jquery-sparkle.git',
				'destination'	=> JQUERY_SPARKLE_PATH,
				'vcs'			=> 'git'
			),
			array(
				'title'			=> 'jQuery Syntax Highlighter',
				'source'		=> 'http://github.com/balupton/jQuery-SyntaxHighlighter.git',
				'destination'	=> JQUERY_SYNTAXHIGHLIGHTER_PATH,
				'vcs'			=> 'git'
			)
		);
		
		# --------------------------
		
		# Install our Advanced Resources
		$this->installResources($resources, 'Installing Advanced Resources...');
		
		# --------------------------
		
		# Return true
		return true;
	}
	
	/**
	 * Install a series of Symlinks
	 * @param array $symlinks
	 * @param string $message [optional]
	 */
	public function installSymlinks ( $symlinks, $message = 'Installing Symlinks...' ) {
		# Setup Symlinks
		echo "\n\n$message\n";
		foreach ( $symlinks as $symlink ) {
			$title = $source = $destination = null;
			extract($symlink);
			# Handle Existing File
			`mkdir -p $destination`;
			@unlink($destination);
			@rmdir($destination);
			# Handle Symlink
			echo "\nInstalling the Symlink ${title} [${source}] to [${destination}].\n";
			`ln -s ${source} ${destination}`;
		}
	}
	
	/**
	 * Install a series of Resources
	 * @param array $resources
	 * @param string $message [optional]
	 */
	public function installResources ( $resources, $message = 'Installing Resources...', $symlinksMessage = 'Installing Resource Symlinks...' ) {
		# Prepare
		$APPLICATION_ROOT_PATH = APPLICATION_ROOT_PATH;
		$symlinksToInstall = array();
		
		# Setup Resources
		echo "\n\n$message\n";
		foreach ( $resources as $resource ) {
			$title = $source = $destination = $command = $submodules = $vcs = $submodule = $inside = null;
			$branch = 'master';
			$symlinks = array();
			extract($resource);
			
			# Ensure
			if ( empty($branch) ) $branch = 'master';
			
			# Check
			if ( is_file($destination) ) {
				unlink($destination);
			}
		
			# Prepare
			$destinationRelative = str_replace($APPLICATION_ROOT_PATH.'/', '', $destination);
			if ( strstr($destination, APPLICATION_ROOT_PATH) ) {
				// We are installing within our application
				$inside = true;
			}
			
			# Detect VCS
			if ( !$vcs ) {
				$vcs = strstr($command, 'git') ? 'git' : 'svn';
			}
			
			# Detect Command
			if ( !$command ) {
				# Detect Command
				if ( $vcs === 'git' ) {
					if ( $inside === true ) {
						// We are installing within our application, use submodule
						$submodule = true;
					}
				}
				
				# Apply Command
				if ( $vcs === 'git' ) {
					if ( $submodule ) {
						$command = 'git submodule add';
					}
					else {
						$command = 'git clone';
					}
				}
				else {
					$command = 'git svn export';
				}
			}
			
			# Apply
			if ( !is_dir($destination) ) {
				# Create
				echo "\nInstalling the Resource [${title}] to [${destination}].\n";
				
				# Fetch
				`cd ${APPLICATION_ROOT_PATH} ; ${command} ${source} ${destinationRelative}`;
			}
			else {
				# Exists
				echo "\nThe Resource [${title}] is already installed at [${destination}].\n";
			}
			
			# Ensure Correct Branch
			if ( $vcs === 'git' ) {
				`cd ${destination}; git reset --hard; git branch ${branch}-old; git checkout ${branch}-old; git branch -D ${branch}; git checkout -b ${branch} origin/${branch}; git checkout ${branch}; git reset --hard; git branch -D ${branch}-old; git pull origin ${branch}; cd ${APPLICATION_ROOT_PATH}`;
			}
			
			# Add Submodule
			`cd ${APPLICATION_ROOT_PATH}; git add ${destinationRelative}`;
			
			# Symlinks
			foreach ( $symlinks as $symlink ) {
				if ( empty($symlink['title']) ) $symlink['title'] = $title;
				$symlinksToInstall[] = $symlink;
			}
		}
		
		# Install Symlinks
		if ( count($symlinksToInstall) )
			$this->installSymlinks($symlinksToInstall, $symlinksMessage);
	}
	
}

$Cli = new Cli();
$Cli->run();
